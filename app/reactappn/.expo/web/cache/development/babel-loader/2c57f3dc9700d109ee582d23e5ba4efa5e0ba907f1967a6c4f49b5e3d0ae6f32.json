{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar invariant_1 = __importDefault(require(\"invariant\"));\nvar Voice = react_native_1.NativeModules.Voice;\nvar voiceEmitter = react_native_1.Platform.OS !== 'web' ? new react_native_1.NativeEventEmitter(Voice) : null;\nvar RCTVoice = function () {\n  function RCTVoice() {\n    _classCallCheck(this, RCTVoice);\n    this._loaded = false;\n    this._listeners = null;\n    this._events = {\n      onSpeechStart: function onSpeechStart() {},\n      onSpeechRecognized: function onSpeechRecognized() {},\n      onSpeechEnd: function onSpeechEnd() {},\n      onSpeechError: function onSpeechError() {},\n      onSpeechResults: function onSpeechResults() {},\n      onSpeechPartialResults: function onSpeechPartialResults() {},\n      onSpeechVolumeChanged: function onSpeechVolumeChanged() {}\n    };\n  }\n  _createClass(RCTVoice, [{\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      Voice.onSpeechStart = undefined;\n      Voice.onSpeechRecognized = undefined;\n      Voice.onSpeechEnd = undefined;\n      Voice.onSpeechError = undefined;\n      Voice.onSpeechResults = undefined;\n      Voice.onSpeechPartialResults = undefined;\n      Voice.onSpeechVolumeChanged = undefined;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        Voice.destroySpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            if (_this._listeners) {\n              _this._listeners.map(function (listener) {\n                return listener.remove();\n              });\n              _this._listeners = null;\n            }\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start(locale) {\n      var _this2 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n        this._listeners = Object.keys(this._events).map(function (key) {\n          return voiceEmitter.addListener(key, _this2._events[key]);\n        });\n      }\n      return new Promise(function (resolve, reject) {\n        var callback = function callback(error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        };\n        if (react_native_1.Platform.OS === 'android') {\n          Voice.startSpeech(locale, Object.assign({\n            EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n            EXTRA_MAX_RESULTS: 5,\n            EXTRA_PARTIAL_RESULTS: true,\n            REQUEST_PERMISSIONS_AUTO: true\n          }, options), callback);\n        } else {\n          Voice.startSpeech(locale, callback);\n        }\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        Voice.stopSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        Voice.cancelSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      return new Promise(function (resolve, reject) {\n        Voice.isSpeechAvailable(function (isAvailable, error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve(isAvailable);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getSpeechRecognitionServices\",\n    value: function getSpeechRecognitionServices() {\n      if (react_native_1.Platform.OS !== 'android') {\n        invariant_1.default(Voice, 'Speech recognition services can be queried for only on Android');\n        return;\n      }\n      return Voice.getSpeechRecognitionServices();\n    }\n  }, {\n    key: \"isRecognizing\",\n    value: function isRecognizing() {\n      return new Promise(function (resolve) {\n        Voice.isRecognizing(function (isRecognizing) {\n          return resolve(isRecognizing);\n        });\n      });\n    }\n  }, {\n    key: \"onSpeechStart\",\n    set: function set(fn) {\n      this._events.onSpeechStart = fn;\n    }\n  }, {\n    key: \"onSpeechRecognized\",\n    set: function set(fn) {\n      this._events.onSpeechRecognized = fn;\n    }\n  }, {\n    key: \"onSpeechEnd\",\n    set: function set(fn) {\n      this._events.onSpeechEnd = fn;\n    }\n  }, {\n    key: \"onSpeechError\",\n    set: function set(fn) {\n      this._events.onSpeechError = fn;\n    }\n  }, {\n    key: \"onSpeechResults\",\n    set: function set(fn) {\n      this._events.onSpeechResults = fn;\n    }\n  }, {\n    key: \"onSpeechPartialResults\",\n    set: function set(fn) {\n      this._events.onSpeechPartialResults = fn;\n    }\n  }, {\n    key: \"onSpeechVolumeChanged\",\n    set: function set(fn) {\n      this._events.onSpeechVolumeChanged = fn;\n    }\n  }]);\n  return RCTVoice;\n}();\nexports.default = new RCTVoice();","map":{"version":3,"names":["_classCallCheck","require","_createClass","__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_native_1","invariant_1","Voice","NativeModules","voiceEmitter","Platform","OS","NativeEventEmitter","RCTVoice","_loaded","_listeners","_events","onSpeechStart","onSpeechRecognized","onSpeechEnd","onSpeechError","onSpeechResults","onSpeechPartialResults","onSpeechVolumeChanged","key","removeAllListeners","undefined","destroy","_this","Promise","resolve","reject","destroySpeech","error","Error","map","listener","remove","start","locale","_this2","options","arguments","length","keys","addListener","callback","startSpeech","assign","EXTRA_LANGUAGE_MODEL","EXTRA_MAX_RESULTS","EXTRA_PARTIAL_RESULTS","REQUEST_PERMISSIONS_AUTO","stop","stopSpeech","cancel","cancelSpeech","isAvailable","isSpeechAvailable","getSpeechRecognitionServices","default","isRecognizing","set","fn"],"sources":["D:/Facultate Anul III/SeverinReactApp/reactappn/node_modules/@react-native-voice/voice/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_native_1 = require(\"react-native\");\nconst invariant_1 = __importDefault(require(\"invariant\"));\nconst Voice = react_native_1.NativeModules.Voice;\n// NativeEventEmitter is only availabe on React Native platforms, so this conditional is used to avoid import conflicts in the browser/server\nconst voiceEmitter = react_native_1.Platform.OS !== 'web' ? new react_native_1.NativeEventEmitter(Voice) : null;\nclass RCTVoice {\n    constructor() {\n        this._loaded = false;\n        this._listeners = null;\n        this._events = {\n            onSpeechStart: () => { },\n            onSpeechRecognized: () => { },\n            onSpeechEnd: () => { },\n            onSpeechError: () => { },\n            onSpeechResults: () => { },\n            onSpeechPartialResults: () => { },\n            onSpeechVolumeChanged: () => { },\n        };\n    }\n    removeAllListeners() {\n        Voice.onSpeechStart = undefined;\n        Voice.onSpeechRecognized = undefined;\n        Voice.onSpeechEnd = undefined;\n        Voice.onSpeechError = undefined;\n        Voice.onSpeechResults = undefined;\n        Voice.onSpeechPartialResults = undefined;\n        Voice.onSpeechVolumeChanged = undefined;\n    }\n    destroy() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.destroySpeech((error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    if (this._listeners) {\n                        this._listeners.map(listener => listener.remove());\n                        this._listeners = null;\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n    start(locale, options = {}) {\n        if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n            this._listeners = Object.keys(this._events).map((key) => voiceEmitter.addListener(key, this._events[key]));\n        }\n        return new Promise((resolve, reject) => {\n            const callback = (error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            };\n            if (react_native_1.Platform.OS === 'android') {\n                Voice.startSpeech(locale, Object.assign({\n                    EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n                    EXTRA_MAX_RESULTS: 5,\n                    EXTRA_PARTIAL_RESULTS: true,\n                    REQUEST_PERMISSIONS_AUTO: true,\n                }, options), callback);\n            }\n            else {\n                Voice.startSpeech(locale, callback);\n            }\n        });\n    }\n    stop() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.stopSpeech(error => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    cancel() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.cancelSpeech(error => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    isAvailable() {\n        return new Promise((resolve, reject) => {\n            Voice.isSpeechAvailable((isAvailable, error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve(isAvailable);\n                }\n            });\n        });\n    }\n    /**\n     * (Android) Get a list of the speech recognition engines available on the device\n     * */\n    getSpeechRecognitionServices() {\n        if (react_native_1.Platform.OS !== 'android') {\n            invariant_1.default(Voice, 'Speech recognition services can be queried for only on Android');\n            return;\n        }\n        return Voice.getSpeechRecognitionServices();\n    }\n    isRecognizing() {\n        return new Promise(resolve => {\n            Voice.isRecognizing((isRecognizing) => resolve(isRecognizing));\n        });\n    }\n    set onSpeechStart(fn) {\n        this._events.onSpeechStart = fn;\n    }\n    set onSpeechRecognized(fn) {\n        this._events.onSpeechRecognized = fn;\n    }\n    set onSpeechEnd(fn) {\n        this._events.onSpeechEnd = fn;\n    }\n    set onSpeechError(fn) {\n        this._events.onSpeechError = fn;\n    }\n    set onSpeechResults(fn) {\n        this._events.onSpeechResults = fn;\n    }\n    set onSpeechPartialResults(fn) {\n        this._events.onSpeechPartialResults = fn;\n    }\n    set onSpeechVolumeChanged(fn) {\n        this._events.onSpeechVolumeChanged = fn;\n    }\n}\nexports.default = new RCTVoice();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}